ESTRUCTURA DE PROYECTO GUESS NUMBER:
Dominios: 
-Users
-Matches

Capas: 
FRONT
-1 Controllers  API
-2 Services 
-3 Repository
DB

Capas Api a BD:
Controllers(Metodos tipo ResponseEntity(DTOs))

Controllers-Services(Devuel Models(BACK, Logica de Negocio))
@Autowired service, inyeccion dependencias

Services-Repository(extiende JPAReposirty<Entity,Tipo IdEntity>) 
@Autowired repository, inyeccion dependencias

-------------------------------------------------------
Crear Proyecto de initializr

https://start.spring.io/

Opciones a Marcar

Metadata: 
Group: nombre de la organizacion , en la facu usa: ar.edu.utn.tup.lc.iii
Artifac: nombre de proyecto 
Name: --
Descripcion: --
Packaname: borra scafoldin

Paquetes: 
Lombok
H2
Web 
JpA
spring-boot-starter-validation
springdoc-openapi-starter-webmvc-ui
modelmapper


Packaging JAR
Java 17

PASOS
1-Abrir carpeta nombre proyecto
2-Copiar archivos zip y pegar en el carpeta del proyecto.
3- OK ADD
4- Ctrl  + S
5-Load MAVEN proyect,cerca de la hora  sino se hace CAMPANITA> LOAD MAVEN PROYECT

--------------------------------------------------------------------------------------------------
Proyecto:

Renombrar Aplication de proyecto: src>java> I/O Archivo color azul > shit f6 ,renombrar > select all(tambien renombrar los test) > ok > Ejecutar Proyecto

PASO 1 
1-Crear Directorios > Ver Imagen Directorio Ojo no es dentro del  sino la carpteta que contiene la Aplication/ICONO AZUL

Archivos
Ver ANOTACIONES DE CADA ARCHIVO

Interfaces: Repository(nombreRepository) y Service(nommbreService) 
Clases: model(Solo es el nombre), Dto(nombreDto),ServiceImpl(nommbreServiceImpl) y Controller(nombreController)

Conceptos: 
Extends: para Heredar clase
Implements: para Implementar interface

------------------------------------------------------------------------------------------
Controller
Sus metodos son TIPO ResponseEntity<AlgoDto>
Usan List<Model>(GET All), Model variable(PUT y POST) , void(DELETE)


Response<Entity>: clase simil HttpResponse 

-Inyectar dependencias : Iservice
@Autowired
private DummyService service;



ANOTACIONES:
@RestController: indica que es un rest controller
@RequestMapping("/dummy"): sirver la url 
@Autowired : permite la inyeccion de dependencias
/CRUD
@GetMapping("")
@GetMapping("{id}"): select , puede recibir por body por el path
Ejemplo: para pasar al path
@RequestMapping("/owners/{ownerId}")
public class OwnerController {

	@GetMapping("/pets/{petId}")
	public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {
		// ...
	}
}

@PostMapping(""): insert
@PutMapping(""):update
@DeleteMapping(""): delete
@PathVariable: variable que toma por el path 
@Valid: el objete tiene que estar validado(Model)
@ControllerAdvice: verica la ejecucion de los controladores
@ExceptionHandler: maneja una excepcion
@Builder: permite generar automáticamente el código requerido para que su clase sea instanciable, implemeta patron builder
-----------------------------------------------------------
Service
Funcion:Une controller con Repository
Sus metodos son TIPO ResponseEntity<Model>

implements  AlgoService

-Inyectar dependencias : AlgoRepository
@Autowired
    private DummyRepository dummyRepository;
	

ANOTACIONES:
@Service: indicar service
@Qualifier("BeanInyectar"): sirve para indicar qu BEAN se debe inyectar

----------------------------------------------------------
Repository
Funcion: da acceso a BD

extends  JPAReposirty<Cual es la Entidad,Tipo de Dato>
Puede implemetar todos los metodos de JPAReposirty

JPAReposirty<AlgoEntity,Tipo de Dato>

ANOTACONES:
@Repository: indicar repository, da acceso a BD

---------------------------------------------------------
Entity
Funcion:Representa una tabla en la base de datos. Está anotada con @Entity y es gestionada por frameworks como JPA/Hibernate.

ANOTACONES:
@Entity: indicar entity, 
@Id: tipo id
@GeneratedValue(strategy = GenerationType.IDENTITY): valor auto incremental
@Column(name = "id",nullable = false): nombre columna id, no acepta nulos 
@Table(name = "marchs"): da nombre a la tabla
@JoinColumn(name = "user_id"): indica que columna hace join
@ManyToOne: muchos a 1 , 
@OneToOne: 1 a 1
@OneToMany: 1 a mucho

@Enumerated(EnumType.STRING): se usa para enumeradores 
---------------------------------------------------------
Model
Funcion

ANOTACIONES:Model: Representa la lógica del negocio, pero no necesariamente se mapea a una tabla. Es más general y puede contener datos de negocio.
@NotNull(validacion):no acepta nulos
@Email: formato email
@Size:el tamño
@Min: cant caract min
@Max: cant caract max


Jakarta:https://beanvalidation.org/
---------------------------------------------------------
DTOs
Funcion:DTO (Data Transfer Object): Es un objeto simple que transporta datos entre capas o aplicaciones. No contiene lógica de negocio ni se mapea directamente a la base de datos.

Exception Handler
Copiar carpeta Common sirve para manejar excepciones 

IMPORTANTE: AL MOMENTO DE PASAR LAS CLAVES DE LOS JSON POR POSTMAN, LAS CLAVES DE DEBEN LLAMAR IGUAL QUE LOS ATRIBUTOS DE LOS DTO  

ANOTACIONES:
@Data: genera getters y setters,constructores con y sin param
@NoArgsConstructor: ctro sin param
@JsonProperty("nombre Clave de Json"):sirve para pasar el nombre de la clave del JSON(Ver Diagram de Flujo),Ej: userName->reglas de Java, JSON->usernamer(ACA USAR NOTACION)
@Email:indicar email
@Builder:
---------------------------------------------------------
VALIDACIONES 

1)Ver y copia  passwordContraintVlidator(tiene metodo que devuelve true o false) @validPassword(Crea la anotacoin)


Libreria passay : https://www.passay.org/
--------------------------------------------------------------------------------------
PASO 2
1-Crear package Config
2-Agregar Clases Mapper Config y SpringDocConfig
3-En lo que esta en rojo Click Der>Add Maven Dependency y Agregar Dependencia En POM 

		ModelMapper
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.1.1</version>
		</dependency>
		
		OPEN API
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.5.0</version>
		</dependency>
		
Biblioteca MAVEN:
https://mvnrepository.com/

----------------------------------------------------------------------------------------
PROYECTO CON INITIAL SCAFOLDING 

PASOS:

1-Crear Repo> Repository template(initial Scafoldin)
2-Cambiar en POM:
	<artifactId>guess-a-number</artifactId>
	<name>guess-a-number</name>
El nombre tiene que ser el mismo del repositorio(Primera CARPETA)

3-Resources>Aplication.Properties>Cambiar spring.application.name=Valor del Punto Anterior
4-Crear 


5-Extraer INFO de diagrama de flujo:
-URLS
-DTOS: Json
-El rombo ver que pasa,GET POST PUT DELETE

7-Modificar DTOs
Campos Dtos se ven en el JSON

8-Completo Interfaz del Service e implemento metodos (metodos en los rombos)

9-Voy a Controller: 
 Traigo del service los metods que veo en el punto 5
 Mappeo un Dto  modelMapper.map(Model,Dto.Class)
 retorno ResponseEntity.ok(objetoDto)

10-En entiyty completar tiene los mismos campos que un DTOs
Poner el nombre de columna con _ , Ej:user_name 
 
 
11-Repository hacer las consultas que hagan falta  
Optional<AlgoEntity> : Puede devolver o no algo.

12-Completar Service:


/
5-Cambiar contenido desde los SERVICES
1ro: Interfaces
2do: Implmentaciones 

6-Cambiar contenido desde los REPOSITORIES
Cambiar por los Entity

7-Cambiar los CONTROLLERS
Ver las URLS de los diagramas de FLUJO
Ejemplo Guess NUMBER
/guess-numbers/users
/guess-numbers/users/{id}/matches
/guess-numbers/users/{id}/matches/{id}

/
---------------------------------------------------------------------------------------------------------
IMPORTANTE 
CONTROLLER PEGA A SERVICE(VALIDAR)
SERVICE PEGA REPOSITORIE
REPOSITORIE PEGA A DB
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------TESTING---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

TEST UNITARIO(pequeños bloques de codigo)-> achicar metodos 

JUnit5

ANOTACIONES:
@TEST: Indic que es un test 
@displayName: le da nombre
@BeforeEach/@AfterEach: indica hacer algo antes/ despues de que corra un metodo.Es para dar un CONTEXTO
@BeforeAll/@AfterAll: antes / despues de correr la clase enterar.Es para dar un CONTEXTO comun a todos los test
@Tag: etiqueta prueba y las agrupa 
@Disable: dsabilita una prueba

Assert
assertEqueals/assertNotEqueals: valor igual/ no igual
assertArrayEquals: dos array son iguales
assertNull/assertNotNull: si un obj es nulo/no es nulo
assertSame/assertNotSame: si 2 variables hace referencia al mismo objeto o no 
assertTrue/assertFalse: validar si una condicion es true o false
assertAll: agrupa assertions en uno solo 
asserIterableEqueals: verifica que 2 iterables tenga los mismo elemento en el mismo orden
assertLinesMatch: 2 listas de string sean iguales, Se puede usar expresiones regulares
assertThrows: verifica si dispara una excepcion especifica
assertTimeout: verifica si la ejecion se hizo antes de cierto tiempo 
fail: hace que el tes falle y dispare AssertionFailedError


MOCKITO (Crea objetos simulados o dependencias)

2 objetos:

MOCKS-> Es objeto/interfaz simulado en lugar de un objeto Real -> se le indica como debe comportarse  -> Se mezcla con los asserts

mock(objeto simulado) 

Anotacion:
@Mock
@InjectMoks: inyecta mock y spy creados por las anotaciones,valido para instancias de clases no func para objetos creados por new

Metodo:
mock()

SPY-> Es objeto/interfaz simulado en lugar de un objeto Real-> mantiene el comportamiento del objeto real -> se puede configurar
Anotacion:
@Spy
@InjectMoks: inyecta mock y spy creados por las anotaciones,valido para instancias de clases no func para objetos creados por new

Metodo:
spy()

Puede sobrescribir el metodo

Metodos Mockito:
whe(): configurar el comportamiento de obj simulado o spy cuando se llama a un metodo en particular 
thenReturn(): configurar el retorno de obj simulado o spy
thentThrow():configurar excepcion que se lanzara cuando se llama a un metodo en mock o spy
doNothing(): configur mock o spy para que no haga nada cuando se llama un metodo en particular,pasas de largo en el codigo
verify(): comprobar  si un metodo de un mock o spy ha sido llamado durante la ejecucion de una prueba,sirve Para metodos Void->El void no returna nada entonces no puedo usar un assert, con esto
         puedo ver si se llama al Void

Geraar test:
click der>genera>test> selec metodos 

----------------------------------------------------------------------------
Partes de los test
// given Contexto Se crea objetos de entrada , salida
        //Entrada
		//Salida
// when
Se llama al metodo real 
given dado
// then

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------EJEMPLOS--------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------TESTING---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

JPAREPOSITORY
Ver Proyecto PiedraPapelTijer

TEORIA TESTJAVA
completar

